#!/usr/bin/python
import sys
import os
import signal
import time

from daemon import runner
from catcher.catcher import Catcher

def daemon_usage():
    print 'Usage: %s OPTIONS <start|stop|restart|status> ' % sys.argv[0]

def is_root():
    '''
    Check if running as root
    '''
    if os.geteuid() == 0:
        return True
    else:
        return False
    
def get_running_pid(file):
    '''
    Gets the pid of the running instance of catcher
    '''
    pid_file = open(file)
    pid = int(pid_file.read())
    pid_file.close()
    return pid

def start(pid_file):
    '''
    Check daemon running, does a clean output to termnal
    '''
    try:
        pid = get_running_pid(pid_file)
        if os.path.exists("/proc/%d" % (pid)) is False:
            with open(pid_file, 'w') as f:
                f.write(0)
            pid = 0
        if pid != 0:
            print 'Catcher already running with process id: %s ' % pid
            sys.exit(1)
    except IOError:
        print 'Starting Catcher daemon...'
        
    #Start daemon
    catcher = Catcher()
    catcher.pidfile_path = pid_file
    daemon_runner = runner.DaemonRunner(catcher)
    daemon_runner.do_action()
    

def stop(pid_file):
    try:
        print 'Stopping Catcher daemon...'
        pid = get_running_pid(pid_file)
        os.kill(pid, signal.SIGTERM)
        print 'Catcher daemon stopped'
    except IOError:
        print 'No pid file %s, daemon not running?' % pid_file
        sys.exit(1)
    except OSError:
        print 'No daemon found running'
        sys.exit(1)
    except ValueError:
        print 'pid file %s appears to be corrupt' % pid_file
        sys.exit(1)
                
        
def status(pid_file):
    try:
        pid = get_running_pid(pid_file)
        print 'Catcher is running with pid %s' % pid
        sys.exit(1)
    except IOError:
        print 'Catcher is not running.'
        sys.exit(1)


def update(giturl):
    print "Updating catcher handlers..."

if __name__ == '__main__':
    from catcher.config import config as CONFIG
    args = sys.argv
    
    if is_root() is False:
        print "catcherd is not running as root"
        sys.exit(1)

    try:
        if args[1] == 'start':
            start(CONFIG.pidfile)
        elif args[1] == 'stop':
            stop(CONFIG.pidfile)
        elif args[1] == 'status':
            status(CONFIG.pidfile)
        else:
            daemon_usage()
    except IndexError:
        sys.exit(1)

        